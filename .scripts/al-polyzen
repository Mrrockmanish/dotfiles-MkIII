#!/usr/bin/env bash


# al-polyzen: polybar session manager script for ArchLabs

# unless an alternate sessionfile is specified use WM-sessionfile
# create a gui dialog with available bars found in config path
# checkmarked bars will be added to sessionfile and started
# starting bars is handled by either my seperate start-polybar script
# or by polybar itself as a fallback if start-polybar script not found

# Copyright (C) 2017 Nathaniel Maia <natemaia10@gmail.com>
# This program is provided free of charge and without warranty
# I ask that if you use this program and make additions/changes
# that you share and contribute back additions/changes

#######################################################################

# check we have required programs installed
if ! hash polybar zenity find &>/dev/null; then
    echo "[ERROR]: Missing Commands. It is required to install 'polybar' 'zenity' 'findutils'"
    exit 1
fi

# This should be done first in order to determine WM for other variables
# loop over window_Managers until we get a match at which point set WM=match and break loop
window_Managers=(bspwm i3 openbox awesome xfce)
for i in ${window_Managers[@]}; do
    if [[ "$(wmctrl -m | grep -i name | awk '{print tolower($2)}')" == "$i" ]]; then
        WM=$i && break
    elif [[ "$(xprop -root -notype | grep "WM_NAME =" | tr -d '"' | awk '{print tolower($3)}')" == "$i" ]]; then
        WM=$i && break
    elif [[ "$(awk '{print tolower($0)}' <<< $XDG_CURRENT_DESKTOP)" == "$i" ]]; then
        WM=$i && break
    fi
done

# Set global script variables. This MUST be AFTER determining WM
# otherwise we have no way of know which WM is being used
CONFPATH="$HOME/.config/polybar"
SESSIONFILE="$CONFPATH/sessions/$WM-sessionfile"
USAGE="\v\tUSAGE: [OPTIONS] [SESSIONFILE]
\n\t-z, --session\tUse entered SESSIONFILE rather than default
\t-h, --help\tPrint this usage message and exit
\n\tWith no command argument, the script uses the current WM session file
\n\t\t'$CONFPATH/sessions/$WM-sessionfile'
\v\tTo start session at login, add the following line to autostart:
\v\t\tsleep 1; al-polybar-session &"

# If $WM is set, set sessionfile to $WM-sessionfile
# Otherwise default to just sessionfile
# NOTE: this will get overwritten if passed a sessionfile
if [[ $WM ]]; then
    SESSIONFILE="$CONFPATH/sessions/$WM-sessionfile"
else
    SESSIONFILE="$CONFPATH/sessions/sessionfile"
fi

# Check 1st arg, if help, echo help message
# When trying to set session, test that $2 is set
# If it is, set SESSIONFILE to $2 otherwise exit error
case $1 in
    -h|-H|--help)
        echo -e "$USAGE" && exit 0
        ;;
    -z|*session)
        if [[ $2 ]]; then
            SESSIONFILE=$2
        else
            echo "Invalid Session.. Exiting" && exit 2
        fi
esac


# create tempfile, add running bars to tempfile
# this is used later to checkmark running bars in find_Bars()
running_Bars() {
    TEMPFILE=$(mktemp --tmpdir polybars.XXXX)
    if pgrep -a polybar &>/dev/null; then echo "$(pgrep -a polybar)" >> $TEMPFILE; fi
}


# Traverse config path to a max depth of 1, finding all files, ensuring we start with clean values
# Search for [bar/*] in each file, if the bar name is not 'master'
# Send array index, file path, and bar name found to the array creator
find_Bars() {
    unset name barArray checkArray barPath
    local num=0

    # small nested function, must be defined before calling it
    # creates barPath, barArr and checkArr arrays. Takes 3 arguments:
    # $1 the index of the array to use, $2 the config file path, $3 the bar name
    # If '$2 $3' in tempfile, bar must be running, checkmark TRUE otherwise FALSE
    fill_Arrays() {
        barPath[$1]="$2"
        barArray[$1]="$3"
        if grep -q "$2 $3" $TEMPFILE; then
            checkMark[$1]="TRUE"
        else
            checkMark[$1]="FALSE"
        fi
    }

    # find files in confpath, if they have any [bar/] add to arrays only if not master bar
    for config in $(find $CONFPATH -maxdepth 3 -type f); do
        name=($(grep "\[bar/.*\]" $config | sed 's/]//' | cut -d "/" -f2))
        for bar in ${name[@]}; do
            if [[ $bar != master ]]; then fill_Arrays $num $config $bar; fi
            num=$(($num+1))
        done
    done
}


# should only be called by the selection dialog
# creates sessionfile, adding each returned bar and its path to it
# Determine best way to start session, if polybar isnt installed echo error message
create_Session() {
    # close any running tint2 instances
    while [[ $(pidof tint2) ]]; do pkill tint2; sleep 0.2; done

    # Empty sessionfile, traverse barPaths, find which file bar is from
    # Add file and bar to sessionfile, ignoring duplicate entries
    mkdir -p $CONFPATH/sessions; > $SESSIONFILE
    for config in ${barPath[@]}; do
        for bar in ${ANSWER[@]}; do
            if grep -q "\[bar/$bar\]" $config && ! grep -q "$config $bar" $SESSIONFILE; then
                echo "--reload --config=$config $bar" >> $SESSIONFILE
            fi
        done
    done

    # Close all running polybar instances
    while [[ $(pidof polybar) ]]; do pkill polybar; sleep 0.2; done

    # read the sessionfile lines
    # run each as polybar options
    while read line; do
        polybar $line &
    done < $SESSIONFILE
}


# loop choice until "OK" is clicked
# If not returned any bars, ask to to go back to bar selection
# If returned any number of bars, call outer create_session function
choose_Bars() {
    local TITLE="ArchLabs Polybar Manager"
    local ICON="--window-icon=/usr/share/icons/hicolor/256x256/apps/al-hello-logo.png"

    while ! [[ $ANSWER ]]; do
        running_Bars                                       #
        find_Bars                                          # Every loop call outer functions to get values
        unset BARS                                         # making sure we work with clean values each time
                                                           #
        for ((j=0; j<${#barArray[*]}; j++));do             # Combine barArray and checkArray into a string for zenity
            BARS="$BARS ${checkMark[j]} ${barArray[j]}"    # This has to be done in a loop for each time 'TRUE/FALSE BAR' to be added
        done                                               #

        # Main selection dialog
        ANSWER=$(zenity $WINICON --list --title="$TITLE" \
                        --text="<big><b>Select bars to launch</b></big>
                        \nRunning bars are checkmarked\nAny un-checkmarked bars will be stopped\n" \
                        --checklist --width=350 --height=400 --multiple \
                        --column="Select" --column="Bar Name" $BARS --separator=" " \
                        --ok-label="Ok" --cancel-label="Cancel")

        if [[ $? == 1 ]]; then      # Cancel is pressed Exit immediately
            exit 0

        elif ! [[ $ANSWER ]]; then  # Ok pressed but no bars selected

            # Ask to continue
            SURE=$(zenity $ICON --title="$TITLE" --question --width=220 --height=150 \
                          --ok-label="Yes please" --cancel-label="Stop all bars" \
                          --text="<big><b>No Bars Selected</b></big>\n\nGo back to selection?")

            if [[ $? == 1 ]]; then     # No Thanks: stop all bars and remove sessionfile
                while [[ $(pidof polybar) ]]; do pkill polybar; sleep 0.2; done
                rm -f $SESSIONFILE && exit 0
            else                # Yes Please: go back to selection dialog
                unset ANSWER
            fi
        else                    # We got checkmarked bars returned, create session
            create_Session
        fi
        rm -r $TEMPFILE         # Clean the tempfile storing running bars each loop
    done
}

# Run the dialog
choose_Bars

exit 0
